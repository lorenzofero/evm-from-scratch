[
  {
    "name": "MSTORE",
    "hint": "Read \"Memory\" section of the course learning materials before implementing memory opcodes",
    "code": {
      "asm": "PUSH32 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20\nPUSH1 0\nMSTORE\nPUSH1 0\nMLOAD",
      "bin": "7f0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20600052600051"
    },
    "expect": {
      "stack": [
        "0x102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20"
      ],
      "success": true
    }
  },
  {
    "name": "MSTORE (tail)",
    "hint": "MLOAD starts from byte offset 31 and picks up the last byte (0x20), the rest of the memory is 00",
    "code": {
      "asm": "PUSH32 0x0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20\nPUSH1 0\nMSTORE\nPUSH1 31\nMLOAD",
      "bin": "7f0102030405060708090a0b0c0d0e0f101112131415161718191a1b1c1d1e1f20600052601f51"
    },
    "expect": {
      "stack": [
        "0x2000000000000000000000000000000000000000000000000000000000000000"
      ],
      "success": true
    }
  },
  {
    "name": "MSTORE8",
    "hint": "Store a single byte at the given offset",
    "code": {
      "asm": "PUSH1 0xff\nPUSH1 31\nMSTORE8\nPUSH1 0\nMLOAD",
      "bin": "60ff601f53600051"
    },
    "expect": {
      "stack": [
        "0xff"
      ],
      "success": true
    }
  },
  {
    "name": "MSIZE",
    "hint": "No memory has been accessed, so the memory size is 0",
    "code": {
      "asm": "MSIZE",
      "bin": "59"
    },
    "expect": {
      "stack": [
        "0x0"
      ],
      "success": true
    }
  },
  {
    "name": "MSIZE (0x20)",
    "hint": "The first 32-byte section has been accessed, so the memory size is 32 (0x20)",
    "code": {
      "asm": "PUSH1 0\nMLOAD\nPOP\nMSIZE",
      "bin": "6000515059"
    },
    "expect": {
      "stack": [
        "0x20"
      ],
      "success": true
    }
  },
  {
    "name": "MSIZE (0x60)",
    "hint": "Memory is measured in 32-byte chunks",
    "code": {
      "asm": "PUSH1 0x39\nMLOAD\nPOP\nMSIZE",
      "bin": "6039515059"
    },
    "expect": {
      "stack": [
        "0x60"
      ],
      "success": true
    }
  },
  {
    "name": "MSIZE (after MSTORE8)",
    "hint": "Any opcode touching memory should update MSIZE, including the future ones. Implement memory access in a way that automatically updates MSIZE no matter which opcode used it",
    "code": {
      "asm": "PUSH1 0xff\nPUSH1 0xff\nMSTORE8\nMSIZE",
      "bin": "60ff60ff5359"
    },
    "expect": {
      "stack": [
        "0x100"
      ],
      "success": true
    }
  },
  {
    "name": "SHA3",
    "hint": "Use an existing library for your programming language. Note that even though the opcode is called SHA3, the algorythm used is keccak256",
    "code": {
      "asm": "PUSH32 0xffffffff00000000000000000000000000000000000000000000000000000000\nPUSH1 0\nMSTORE\nPUSH1 4\nPUSH1 0\nSHA3",
      "bin": "7fffffffff000000000000000000000000000000000000000000000000000000006000526004600020"
    },
    "expect": {
      "stack": [
        "0x29045a592007d0c246ef02c2223570da9522d0cf0f73282c79a1bc8f0bb2c238"
      ],
      "success": true
    }
  },
  {
    "name": "ADDRESS",
    "hint": "Read \"Transaction\" section of the course learning materials. Change your evm function parameters list to include transaction data",
    "tx": {
      "to": "0x1000000000000000000000000000000000000aaa"
    },
    "code": {
      "asm": "ADDRESS",
      "bin": "30"
    },
    "expect": {
      "stack": [
        "0x1000000000000000000000000000000000000aaa"
      ],
      "success": true
    }
  },
  {
    "name": "CALLER",
    "hint": "Solidity calls this msg.sender",
    "tx": {
      "from": "0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159d"
    },
    "code": {
      "asm": "CALLER",
      "bin": "33"
    },
    "expect": {
      "stack": [
        "0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159d"
      ],
      "success": true
    }
  },
  {
    "name": "ORIGIN",
    "hint": "Solidity calls this tx.origin",
    "tx": {
      "origin": "0x1337"
    },
    "code": {
      "asm": "ORIGIN",
      "bin": "32"
    },
    "expect": {
      "stack": [
        "0x1337"
      ],
      "success": true
    }
  },
  {
    "name": "GASPRICE",
    "tx": {
      "gasprice": "0x99"
    },
    "code": {
      "asm": "GASPRICE",
      "bin": "3a"
    },
    "expect": {
      "stack": [
        "0x99"
      ],
      "success": true
    },
    "hint": ""
  },
  {
    "name": "BASEFEE",
    "block": {
      "basefee": "0x1"
    },
    "code": {
      "asm": "BASEFEE",
      "bin": "48"
    },
    "expect": {
      "stack": [
        "0x1"
      ],
      "success": true
    },
    "hint": ""
  },
  {
    "name": "COINBASE",
    "hint": "Do not hardcode these numbers, pull them from the test cases",
    "block": {
      "coinbase": "0x777"
    },
    "code": {
      "asm": "COINBASE",
      "bin": "41"
    },
    "expect": {
      "stack": [
        "0x777"
      ],
      "success": true
    }
  },
  {
    "name": "COINBASE (different one)",
    "hint": "Do not hardcode these numbers, pull them from the test cases",
    "block": {
      "coinbase": "0x888"
    },
    "code": {
      "asm": "COINBASE",
      "bin": "41"
    },
    "expect": {
      "stack": [
        "0x888"
      ],
      "success": true
    }
  },
  {
    "name": "TIMESTAMP",
    "hint": "Solidity calls this block.timestamp",
    "block": {
      "timestamp": "0xe4e1c1"
    },
    "code": {
      "asm": "TIMESTAMP",
      "bin": "42"
    },
    "expect": {
      "stack": [
        "0xe4e1c1"
      ],
      "success": true
    }
  },
  {
    "name": "NUMBER",
    "hint": "Solidity calls this block.number",
    "block": {
      "number": "0x1000001"
    },
    "code": {
      "asm": "NUMBER",
      "bin": "43"
    },
    "expect": {
      "stack": [
        "0x1000001"
      ],
      "success": true
    }
  },
  {
    "name": "DIFFICULTY",
    "hint": "Also known as PREVRANDAO, not used in these test cases yet",
    "block": {
      "difficulty": "0x20000"
    },
    "code": {
      "asm": "DIFFICULTY",
      "bin": "44"
    },
    "expect": {
      "stack": [
        "0x20000"
      ],
      "success": true
    }
  },
  {
    "name": "GASLIMIT",
    "block": {
      "gaslimit": "0xffffffffffff"
    },
    "code": {
      "asm": "GASLIMIT",
      "bin": "45"
    },
    "expect": {
      "stack": [
        "0xffffffffffff"
      ],
      "success": true
    },
    "hint": ""
  },
  {
    "name": "CHAINID",
    "block": {
      "chainid": "0x1"
    },
    "code": {
      "asm": "CHAINID",
      "bin": "46"
    },
    "expect": {
      "stack": [
        "0x1"
      ],
      "success": true
    },
    "hint": ""
  },
  {
    "name": "BLOCKHASH",
    "hint": "Not used in this test suite, can return 0",
    "code": {
      "asm": "PUSH1 0\nBLOCKHASH",
      "bin": "600040"
    },
    "expect": {
      "stack": [
        "0x0"
      ],
      "success": true
    }
  },
  {
    "name": "BALANCE",
    "hint": "Read \"State\" section of the course learning materials. Modify your evm function to take state as one of the arguments, or turn it into a class",
    "state": {
      "0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159d": {
        "balance": "0x100"
      }
    },
    "code": {
      "asm": "PUSH20 0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159d\nBALANCE",
      "bin": "731e79b045dc29eae9fdc69673c9dcd7c53e5e159d31"
    },
    "expect": {
      "stack": [
        "0x100"
      ],
      "success": true
    }
  },
  {
    "name": "BALANCE (empty)",
    "hint": "Balance of accounts not present in state is zero",
    "code": {
      "asm": "PUSH20 0xaf69610ea9ddc95883f97a6a3171d52165b69b03\nBALANCE",
      "bin": "73af69610ea9ddc95883f97a6a3171d52165b69b0331"
    },
    "expect": {
      "stack": [
        "0x0"
      ],
      "success": true
    }
  },
  {
    "name": "CALLVALUE",
    "hint": "Read \"Calls\" section of the course learning materials. Solidity calls this msg.value, it is amount of wei sent as part of this transaction",
    "tx": {
      "value": "0x1000"
    },
    "code": {
      "asm": "CALLVALUE",
      "bin": "34"
    },
    "expect": {
      "stack": [
        "0x1000"
      ],
      "success": true
    }
  },
  {
    "name": "CALLDATALOAD",
    "hint": "Read \"Calls\" section of the course learning materials. Calldata is an array of bytes sent to the evm function",
    "tx": {
      "data": "000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff"
    },
    "code": {
      "asm": "PUSH1 0\nCALLDATALOAD",
      "bin": "600035"
    },
    "expect": {
      "stack": [
        "0x102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff"
      ],
      "success": true
    }
  },
  {
    "name": "CALLDATALOAD (tail)",
    "hint": "Overflow bytes filled with zeros",
    "tx": {
      "data": "000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff"
    },
    "code": {
      "asm": "PUSH1 31\nCALLDATALOAD",
      "bin": "601f35"
    },
    "expect": {
      "stack": [
        "0xff00000000000000000000000000000000000000000000000000000000000000"
      ],
      "success": true
    }
  },
  {
    "name": "CALLDATASIZE",
    "hint": "Size (in bytes) of calldata buffer",
    "tx": {
      "data": "000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff"
    },
    "code": {
      "asm": "CALLDATASIZE",
      "bin": "36"
    },
    "expect": {
      "stack": [
        "0x20"
      ],
      "success": true
    }
  },
  {
    "name": "CALLDATASIZE (no data)",
    "code": {
      "asm": "CALLDATASIZE",
      "bin": "36"
    },
    "expect": {
      "stack": [
        "0x0"
      ],
      "success": true
    },
    "hint": ""
  },
  {
    "name": "CALLDATACOPY",
    "hint": "Copy 32-byte chunk of calldata into memory. Do not forget to update MSIZE after CALLDATACOPY",
    "tx": {
      "data": "000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff"
    },
    "code": {
      "asm": "PUSH1 32\nPUSH1 0\nPUSH1 0\nCALLDATACOPY\nPUSH1 0\nMLOAD",
      "bin": "60206000600037600051"
    },
    "expect": {
      "stack": [
        "0x102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff"
      ],
      "success": true
    }
  },
  {
    "name": "CALLDATACOPY (tail)",
    "hint": "Overflow bytes filled with zeros",
    "tx": {
      "data": "000102030405060708090a0b0c0d0e0f00112233445566778899aabbccddeeff"
    },
    "code": {
      "asm": "PUSH1 1\nPUSH1 31\nPUSH1 0\nCALLDATACOPY\nPUSH1 0\nMLOAD",
      "bin": "6001601f600037600051"
    },
    "expect": {
      "stack": [
        "0xff00000000000000000000000000000000000000000000000000000000000000"
      ],
      "success": true
    }
  },
  {
    "name": "CODESIZE (small)",
    "hint": "Size of the bytecode running in the current context",
    "code": {
      "asm": "CODESIZE",
      "bin": "38"
    },
    "expect": {
      "stack": [
        "0x1"
      ],
      "success": true
    }
  },
  {
    "name": "CODESIZE",
    "code": {
      "asm": "PUSH20 0\nPOP\nCODESIZE",
      "bin": "7300000000000000000000000000000000000000005038"
    },
    "expect": {
      "stack": [
        "0x17"
      ],
      "success": true
    },
    "hint": ""
  },
  {
    "name": "CODECOPY",
    "hint": "Copy your own code into memory. Implementing quines in EVM is really easy",
    "code": {
      "asm": "PUSH1 32\nPUSH1 0\nPUSH1 0\nCODECOPY\nPUSH1 0\nMLOAD",
      "bin": "60206000600039600051"
    },
    "expect": {
      "stack": [
        "0x6020600060003960005100000000000000000000000000000000000000000000"
      ],
      "success": true
    }
  },
  {
    "name": "CODECOPY (tail)",
    "hint": "Overflow bytes filled with zeros",
    "code": {
      "asm": "PUSH32 0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff\nPOP\nPUSH1 2\nPUSH1 32\nPUSH1 0\nCODECOPY\nPUSH1 0\nMLOAD",
      "bin": "7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5060026020600039600051"
    },
    "expect": {
      "stack": [
        "0xff50000000000000000000000000000000000000000000000000000000000000"
      ],
      "success": true
    }
  },
  {
    "name": "EXTCODESIZE (empty)",
    "code": {
      "asm": "PUSH20 0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159d\nEXTCODESIZE",
      "bin": "731e79b045dc29eae9fdc69673c9dcd7c53e5e159d3b"
    },
    "expect": {
      "stack": [
        "0x0"
      ],
      "success": true
    },
    "hint": ""
  },
  {
    "name": "EXTCODESIZE",
    "hint": "Read \"State\" section of the course learning materials",
    "state": {
      "0x1000000000000000000000000000000000000aaa": {
        "code": {
          "asm": "PUSH1 1",
          "bin": "6001"
        }
      }
    },
    "code": {
      "asm": "PUSH20 0x1000000000000000000000000000000000000aaa\nEXTCODESIZE",
      "bin": "731000000000000000000000000000000000000aaa3b"
    },
    "expect": {
      "stack": [
        "0x2"
      ],
      "success": true
    }
  },
  {
    "name": "EXTCODECOPY",
    "state": {
      "0x1000000000000000000000000000000000000aaa": {
        "code": {
          "asm": null,
          "bin": "6001"
        }
      }
    },
    "code": {
      "asm": "PUSH1 32\nPUSH1 0\nPUSH1 0\nPUSH20 0x1000000000000000000000000000000000000aaa\nEXTCODECOPY\nPUSH1 0\nMLOAD",
      "bin": "602060006000731000000000000000000000000000000000000aaa3c600051"
    },
    "expect": {
      "stack": [
        "0x6001000000000000000000000000000000000000000000000000000000000000"
      ],
      "success": true
    },
    "hint": ""
  },
  {
    "name": "EXTCODEHASH",
    "hint": "Use the same library you used for SHA3 opcode",
    "state": {
      "0x1000000000000000000000000000000000000aaa": {
        "code": {
          "asm": null,
          "bin": "FFFFFFFF"
        }
      }
    },
    "code": {
      "asm": "PUSH20 0x1000000000000000000000000000000000000aaa\nEXTCODEHASH",
      "bin": "731000000000000000000000000000000000000aaa3f"
    },
    "expect": {
      "stack": [
        "0x29045a592007d0c246ef02c2223570da9522d0cf0f73282c79a1bc8f0bb2c238"
      ],
      "success": true
    }
  },
  {
    "name": "EXTCODEHASH (empty)",
    "code": {
      "asm": "PUSH20 0x1000000000000000000000000000000000000aaa\nEXTCODEHASH",
      "bin": "731000000000000000000000000000000000000aaa3f"
    },
    "expect": {
      "stack": [
        "0x0"
      ],
      "success": true
    },
    "hint": ""
  },
  {
    "name": "SELFBALANCE",
    "tx": {
      "to": "0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159d"
    },
    "state": {
      "0x1e79b045dc29eae9fdc69673c9dcd7c53e5e159d": {
        "balance": "0x200"
      }
    },
    "code": {
      "asm": "SELFBALANCE",
      "bin": "47"
    },
    "expect": {
      "stack": [
        "0x200"
      ],
      "success": true
    },
    "hint": ""
  },
  {
    "name": "SSTORE",
    "hint": "Read \"Storage\" section of the course learning materials",
    "code": {
      "asm": "PUSH1 1\nPUSH1 0\nSSTORE\nPUSH1 0\nSLOAD",
      "bin": "6001600055600054"
    },
    "expect": {
      "stack": [
        "0x1"
      ],
      "success": true
    }
  },
  {
    "name": "SSTORE (non-zero location)",
    "code": {
      "asm": "PUSH1 2\nPUSH4 0x98fe5c2c\nSSTORE\nPUSH4 0x98fe5c2c\nSLOAD",
      "bin": "60026398fe5c2c556398fe5c2c54"
    },
    "expect": {
      "stack": [
        "0x2"
      ],
      "success": true
    },
    "hint": ""
  },
  {
    "name": "SLOAD (empty)",
    "hint": "All storage is initialized to zeros",
    "code": {
      "asm": "PUSH1 0xff\nSLOAD",
      "bin": "60ff54"
    },
    "expect": {
      "stack": [
        "0x0"
      ],
      "success": true
    }
  },
  {
    "name": "LOG0",
    "hint": "Make evm function return array of logs, modify the testing code to assert that the logs match",
    "tx": {
      "to": "0x1000000000000000000000000000000000000001"
    },
    "code": {
      "asm": "PUSH1 0xaa\nPUSH1 0\nMSTORE\nPUSH1 1\nPUSH1 31\nLOG0",
      "bin": "60aa6000526001601fa0"
    },
    "expect": {
      "logs": [
        {
          "address": "0x1000000000000000000000000000000000000001",
          "data": "aa",
          "topics": []
        }
      ],
      "success": true
    }
  },
  {
    "name": "LOG1",
    "hint": "Make evm function return array of logs, modify the testing code to assert that the logs match",
    "tx": {
      "to": "0x1000000000000000000000000000000000000001"
    },
    "code": {
      "asm": "PUSH1 0xbb\nPUSH1 0\nMSTORE\nPUSH32 0x1111111111111111111111111111111111111111111111111111111111111111\nPUSH1 1\nPUSH1 31\nLOG1",
      "bin": "60bb6000527f11111111111111111111111111111111111111111111111111111111111111116001601fa1"
    },
    "expect": {
      "logs": [
        {
          "address": "0x1000000000000000000000000000000000000001",
          "data": "bb",
          "topics": [
            "0x1111111111111111111111111111111111111111111111111111111111111111"
          ]
        }
      ],
      "success": true
    }
  },
  {
    "name": "LOG2",
    "hint": "Use the same code to handle LOG1...LOG4 opcodes",
    "tx": {
      "to": "0x1000000000000000000000000000000000000001"
    },
    "code": {
      "asm": "PUSH1 0xcc\nPUSH1 0\nMSTORE\nPUSH32 0x1111111111111111111111111111111111111111111111111111111111111111\nPUSH32 0x2222222222222222222222222222222222222222222222222222222222222222\nPUSH1 1\nPUSH1 31\nLOG2",
      "bin": "60cc6000527f11111111111111111111111111111111111111111111111111111111111111117f22222222222222222222222222222222222222222222222222222222222222226001601fa2"
    },
    "expect": {
      "logs": [
        {
          "address": "0x1000000000000000000000000000000000000001",
          "data": "cc",
          "topics": [
            "0x2222222222222222222222222222222222222222222222222222222222222222",
            "0x1111111111111111111111111111111111111111111111111111111111111111"
          ]
        }
      ],
      "success": true
    }
  },
  {
    "name": "LOG3",
    "hint": "N = OPCODE - LOG0, pop N items from the stack as topics",
    "tx": {
      "to": "0x1000000000000000000000000000000000000001"
    },
    "code": {
      "asm": "PUSH1 0xdd\nPUSH1 0\nMSTORE\nPUSH32 0x1111111111111111111111111111111111111111111111111111111111111111\nPUSH32 0x2222222222222222222222222222222222222222222222222222222222222222\nPUSH32 0x3333333333333333333333333333333333333333333333333333333333333333\nPUSH1 1\nPUSH1 31\nLOG3",
      "bin": "60dd6000527f11111111111111111111111111111111111111111111111111111111111111117f22222222222222222222222222222222222222222222222222222222222222227f33333333333333333333333333333333333333333333333333333333333333336001601fa3"
    },
    "expect": {
      "logs": [
        {
          "address": "0x1000000000000000000000000000000000000001",
          "data": "dd",
          "topics": [
            "0x3333333333333333333333333333333333333333333333333333333333333333",
            "0x2222222222222222222222222222222222222222222222222222222222222222",
            "0x1111111111111111111111111111111111111111111111111111111111111111"
          ]
        }
      ],
      "success": true
    }
  },
  {
    "name": "LOG4",
    "hint": "Refactoring code is always a good idea. Your code will become cleaner, and the tests will catch if something breaks",
    "tx": {
      "to": "0x1000000000000000000000000000000000000001"
    },
    "code": {
      "asm": "PUSH1 0xee\nPUSH1 0\nMSTORE\nPUSH32 0x1111111111111111111111111111111111111111111111111111111111111111\nPUSH32 0x2222222222222222222222222222222222222222222222222222222222222222\nPUSH32 0x3333333333333333333333333333333333333333333333333333333333333333\nPUSH32 0x4444444444444444444444444444444444444444444444444444444444444444\nPUSH1 1\nPUSH1 31\nLOG4",
      "bin": "60ee6000527f11111111111111111111111111111111111111111111111111111111111111117f22222222222222222222222222222222222222222222222222222222222222227f33333333333333333333333333333333333333333333333333333333333333337f44444444444444444444444444444444444444444444444444444444444444446001601fa4"
    },
    "expect": {
      "logs": [
        {
          "address": "0x1000000000000000000000000000000000000001",
          "data": "ee",
          "topics": [
            "0x4444444444444444444444444444444444444444444444444444444444444444",
            "0x3333333333333333333333333333333333333333333333333333333333333333",
            "0x2222222222222222222222222222222222222222222222222222222222222222",
            "0x1111111111111111111111111111111111111111111111111111111111111111"
          ]
        }
      ],
      "success": true
    }
  },
  {
    "name": "RETURN",
    "hint": "Read \"Calls and Returns\" section of the course learning materials",
    "code": {
      "asm": "PUSH1 0xA2\nPUSH1 0\nMSTORE\nPUSH1 1\nPUSH1 31\nRETURN",
      "bin": "60a26000526001601ff3"
    },
    "expect": {
      "success": true,
      "return": "a2"
    }
  },
  {
    "name": "REVERT",
    "hint": "Note that this test expects `success` to be false",
    "code": {
      "asm": "PUSH1 0xF1\nPUSH1 0\nMSTORE\nPUSH1 1\nPUSH1 31\nREVERT",
      "bin": "60f16000526001601ffd"
    },
    "expect": {
      "success": false,
      "return": "f1"
    }
  },
  {
    "name": "CALL",
    "hint": "Read \"Calls and Returns\" section of the course learning materials. Recursively call evm function from itself when handing this opcode",
    "state": {
      "0x1000000000000000000000000000000000000c42": {
        "code": {
          "asm": "PUSH1 0x42\nPUSH1 0\nMSTORE\nPUSH1 1\nPUSH1 31\nRETURN",
          "bin": "60426000526001601ff3"
        }
      }
    },
    "code": {
      "asm": "PUSH1 1\nPUSH1 31\nPUSH1 0\nPUSH1 0\nPUSH1 0\nPUSH20 0x1000000000000000000000000000000000000c42\nPUSH1 0\nCALL\nPUSH1 0\nMLOAD",
      "bin": "6001601f600060006000731000000000000000000000000000000000000c426000f1600051"
    },
    "expect": {
      "stack": [
        "0x42",
        "0x1"
      ],
      "success": true
    }
  },
  {
    "name": "CALL (returns address)",
    "hint": "In the inner context, the CALLER is the contract we are sending the initial transaction to",
    "tx": {
      "to": "0x1000000000000000000000000000000000000aaa"
    },
    "state": {
      "0x1000000000000000000000000000000000000c42": {
        "code": {
          "asm": "CALLER\nPUSH1 0\nMSTORE\nPUSH1 32\nPUSH1 0\nRETURN",
          "bin": "3360005260206000f3"
        }
      }
    },
    "code": {
      "asm": "PUSH1 32\nPUSH1 0\nPUSH1 0\nPUSH1 0\nPUSH1 0\nPUSH20 0x1000000000000000000000000000000000000c42\nPUSH1 0\nCALL\nPUSH1 0\nMLOAD",
      "bin": "60206000600060006000731000000000000000000000000000000000000c426000f1600051"
    },
    "expect": {
      "stack": [
        "0x1000000000000000000000000000000000000aaa",
        "0x1"
      ],
      "success": true
    }
  },
  {
    "name": "CALL (reverts)",
    "hint": "Reverts can also return data",
    "state": {
      "0x1000000000000000000000000000000000000c42": {
        "code": {
          "asm": "PUSH1 0x42\nPUSH1 0\nMSTORE\nPUSH1 1\nPUSH1 31\nREVERT",
          "bin": "60426000526001601ffd"
        }
      }
    },
    "code": {
      "asm": "PUSH1 1\nPUSH1 31\nPUSH1 0\nPUSH1 0\nPUSH1 0\nPUSH20 0x1000000000000000000000000000000000000c42\nPUSH1 0\nCALL\nPUSH1 0\nMLOAD",
      "bin": "6001601f600060006000731000000000000000000000000000000000000c426000f1600051"
    },
    "expect": {
      "stack": [
        "0x42",
        "0x0"
      ],
      "success": true
    }
  },
  {
    "name": "RETURNDATASIZE (empty)",
    "code": {
      "asm": "RETURNDATASIZE",
      "bin": "3d"
    },
    "expect": {
      "stack": [
        "0x0"
      ],
      "success": true
    },
    "hint": ""
  },
  {
    "name": "RETURNDATASIZE",
    "state": {
      "0x1000000000000000000000000000000000000c42": {
        "code": {
          "asm": "PUSH1 0x42\nPUSH1 0\nMSTORE\nPUSH1 1\nPUSH1 31\nRETURN",
          "bin": "60426000526001601ff3"
        }
      }
    },
    "code": {
      "asm": "PUSH1 0\nPUSH1 0\nPUSH1 0\nPUSH1 0\nPUSH1 0\nPUSH20 0x1000000000000000000000000000000000000c42\nPUSH1 0\nCALL\nPOP\nRETURNDATASIZE",
      "bin": "60006000600060006000731000000000000000000000000000000000000c426000f1503d"
    },
    "expect": {
      "stack": [
        "0x1"
      ],
      "success": true
    },
    "hint": ""
  },
  {
    "name": "RETURNDATACOPY",
    "state": {
      "0x1000000000000000000000000000000000000c42": {
        "code": {
          "asm": "PUSH1 0x42\nPUSH1 0\nMSTORE\nPUSH1 1\nPUSH1 31\nRETURN",
          "bin": "60426000526001601ff3"
        }
      }
    },
    "code": {
      "asm": "PUSH1 1\nPUSH1 31\nPUSH1 0\nPUSH1 0\nPUSH1 0\nPUSH20 0x1000000000000000000000000000000000000c42\nPUSH1 0\nCALL\nPOP\nPUSH1 1\nPUSH1 0\nPUSH1 0xff\nRETURNDATACOPY\nPUSH1 0xff\nMLOAD",
      "bin": "6001601f600060006000731000000000000000000000000000000000000c426000f1506001600060ff3e60ff51"
    },
    "expect": {
      "stack": [
        "0x4200000000000000000000000000000000000000000000000000000000000000"
      ],
      "success": true
    },
    "hint": ""
  },
  {
    "name": "DELEGATECALL",
    "hint": "Like CALL, but keep the transaction data (from, origin, address) and use the code from the other account",
    "tx": {
      "to": "0x1000000000000000000000000000000000000aaa"
    },
    "state": {
      "0xdddddddddddddddddddddddddddddddddddddddd": {
        "code": {
          "asm": "ADDRESS\nPUSH1 0\nSSTORE",
          "bin": "30600055"
        }
      }
    },
    "code": {
      "asm": "PUSH1 0\nDUP1\nDUP1\nDUP1\nPUSH20 0xdddddddddddddddddddddddddddddddddddddddd\nGAS\nDELEGATECALL\nPUSH1 0\nSLOAD",
      "bin": "600080808073dddddddddddddddddddddddddddddddddddddddd5af4600054"
    },
    "expect": {
      "stack": [
        "0x1000000000000000000000000000000000000aaa",
        "0x1"
      ],
      "success": true
    }
  },
  {
    "name": "STATICCALL",
    "hint": "Like CALL, but disable state modifications",
    "state": {
      "0x1000000000000000000000000000000000000c42": {
        "code": {
          "asm": "PUSH1 0x42\nPUSH1 0\nMSTORE\nPUSH1 1\nPUSH1 31\nRETURN",
          "bin": "60426000526001601ff3"
        }
      }
    },
    "code": {
      "asm": "PUSH1 1\nPUSH1 31\nPUSH1 0\nPUSH1 0\nPUSH20 0x1000000000000000000000000000000000000c42\nPUSH1 0\nSTATICCALL\nPUSH1 0\nMLOAD",
      "bin": "6001601f60006000731000000000000000000000000000000000000c426000fa600051"
    },
    "expect": {
      "stack": [
        "0x42",
        "0x1"
      ],
      "success": true
    }
  },
  {
    "name": "STATICCALL (reverts on write)",
    "hint": "Use a flag to tell the evm function whenever the context is writeable (CALL) or not (STATICCALL)",
    "state": {
      "0x1000000000000000000000000000000000000c42": {
        "code": {
          "asm": "PUSH1 0x42\nPUSH1 0\nSSTORE",
          "bin": "6042600055"
        }
      }
    },
    "code": {
      "asm": "PUSH1 1\nPUSH1 31\nPUSH1 0\nPUSH1 0\nPUSH20 0x1000000000000000000000000000000000000c42\nPUSH1 0\nSTATICCALL",
      "bin": "6001601f60006000731000000000000000000000000000000000000c426000fa"
    },
    "expect": {
      "stack": [
        "0x0"
      ],
      "success": true
    }
  },
  {
    "name": "CREATE (empty)",
    "hint": "Read \"Creating new contracts\" section of the course learning materials. This code creates a new empty account with balance 9",
    "tx": {
      "to": "0x9bbfed6889322e016e0a02ee459d306fc19545d8"
    },
    "code": {
      "asm": "PUSH1 0\nPUSH1 0\nPUSH1 9\nCREATE\nBALANCE",
      "bin": "600060006009f031"
    },
    "expect": {
      "stack": [
        "0x9"
      ],
      "success": true
    }
  },
  {
    "name": "CREATE (with 4x FF)",
    "hint": "Read \"Creating new contracts\" section of the course learning materials. CALL with the given code, store the returned bytes as new contracts bytecode",
    "tx": {
      "to": "0x9bbfed6889322e016e0a02ee459d306fc19545d8"
    },
    "code": {
      "asm": "PUSH1 32\nPUSH1 0\nPUSH1 0\nPUSH13 0x63FFFFFFFF6000526004601CF3\nPUSH1 0\nMSTORE\nPUSH1 13\nPUSH1 19\nPUSH1 0\nCREATE\nEXTCODECOPY\nPUSH1 0\nMLOAD",
      "bin": "6020600060006c63ffffffff6000526004601cf3600052600d60136000f03c600051"
    },
    "expect": {
      "stack": [
        "0xffffffff00000000000000000000000000000000000000000000000000000000"
      ],
      "success": true
    }
  },
  {
    "name": "CREATE (reverts)",
    "hint": "No address when constructor code reverts",
    "tx": {
      "to": "0x9bbfed6889322e016e0a02ee459d306fc19545d8"
    },
    "code": {
      "asm": "PUSH13 0x63FFFFFFFF6000526004601CFD\nPUSH1 0\nMSTORE\nPUSH1 13\nPUSH1 19\nPUSH1 0\nCREATE",
      "bin": "6c63ffffffff6000526004601cfd600052600d60136000f0"
    },
    "expect": {
      "stack": [
        "0x0"
      ],
      "success": true
    }
  },
  {
    "name": "SELFDESTRUCT",
    "hint": "Note that for simplicity, this opcode should delete the account from the state. In the real EVM this happens only after the transaction has been processed, but that would overcomplicate these tests",
    "state": {
      "0xdead00000000000000000000000000000000dead": {
        "balance": "0x7",
        "code": {
          "asm": "PUSH20 0xa1c300000000000000000000000000000000a1c3\nSELFDESTRUCT",
          "bin": "73a1c300000000000000000000000000000000a1c3ff"
        }
      }
    },
    "code": {
      "asm": "PUSH1 0\nDUP1\nDUP1\nDUP1\nDUP1\nPUSH20 0xdead00000000000000000000000000000000dead\nGAS\nCALL\nPOP\nPUSH20 0xa1c300000000000000000000000000000000a1c3\nBALANCE\nPUSH20 0xdead00000000000000000000000000000000dead\nEXTCODESIZE",
      "bin": "60008080808073dead00000000000000000000000000000000dead5af15073a1c300000000000000000000000000000000a1c33173dead00000000000000000000000000000000dead3b"
    },
    "expect": {
      "stack": [
        "0x0",
        "0x7"
      ],
      "success": true
    }
  }
]
